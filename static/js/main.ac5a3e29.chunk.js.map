{"version":3,"sources":["models/theme.ts","models/app.ts","models/post.ts","models/index.ts","containers/NavbarList/_components/NavbarList.tsx","containers/NavbarList/_components/NavbarListItem.tsx","containers/NavbarList/index.tsx","components/BlurRoot.tsx","layouts/Navbar.tsx","layouts/themes/Content.ts","layouts/Content.tsx","layouts/themes/Main.ts","layouts/index.tsx","components/animations.tsx","pages/home/_components/index.tsx","pages/home/index.tsx","pages/about/index.tsx","pages/posts/_components/PostList.tsx","pages/posts/_components/PostListItem.tsx","components/LineClamp.tsx","pages/posts/_components/PostContent.tsx","pages/posts/_components/index.tsx","pages/posts/index.tsx","routes/index.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/icons/close.svg","assets/images/background.jpg","assets/icons/arrow-right.svg","assets/icons/fullscreen.svg"],"names":["ThemeModes","LayoutModes","AppStore","version","observable","ThemeStore","visible","this","navbarVisible","undefined","Light","Recipe","action","PostStore","md","MarkdownIt","highlight","str","lang","console","log","hljs","getLanguage","value","E","error","posts","length","fetching","fetch","res","json","data","map","item","attrs","attributes","body","title","summary","description","createDate","Date","getTime","updateDate","author","content","resolveMarkdownSource","source","render","appStore","themeStore","postStore","appState","storesContext","React","createContext","app","theme","post","useStores","useContext","flexDirection","House","NavbarList","styled","ul","padding","NavbarListItemRoot","li","props","active","NavbarListItem","children","onClick","NavbarListContainer","location","useLocation","history","useHistory","routes","key","name","pathname","link","path","push","meta","label","BlurRoot","css","ImageBackground","height","width","Wrapper","div","collapsed","switcherDisplay","Swithcer","img","src","IconClose","Navbar","mode","onClose","flexGrow","ContentRoot","ContentTheme","CallNavOutArrow","IconArrowRight","Content","callNavOutVisible","onCallNavOut","display","Main","main","MainTheme","observer","layout","toggleNavbar","fadeIn","config","duration","Hint","Title","h1","Message","p","useLayoutEffect","Typed","strings","typeSpeed","fadeOut","id","AboutPage","PostList","lines","contentMode","PostTitle","PostMeta","h2","PostMetaItem","span","PostSummary","PostListItem","MarkdownViewer","className","FullscreenTrigger","IconFullscreen","PostContent","useState","el","useRef","ref","current","requestFullscreen","dangerouslySetInnerHTML","__html","PostPortal","Loading","ReactLoading","PostPageRoot","match","useRouteMatch","params","fmtDate","useCallback","date","dayjs","format","list","useMemo","filter","_","index","Number","useEffect","fetchPosts","type","isContentMode","handlePostClick","createBrowserHistory","exact","AppRoutes","App","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.ac5a3e29.chunk.js","sourcesContent":["import {\n  observable,\n  action\n} from 'mobx'\n\nexport enum ThemeModes {\n  Light,\n  Dark,\n  HighContrast\n}\n\nexport enum LayoutModes {\n  House,\n  Recipe\n}\n\nexport interface IThemeStore {\n  mode: ThemeModes,\n  layout: LayoutModes,\n  navbarVisible: boolean\n}\n\nexport class ThemeStore implements IThemeStore {\n  @observable mode = ThemeModes.Light\n  @observable layout = LayoutModes.Recipe\n  @observable navbarVisible = true\n\n  @action\n  toggleNavbar(visible?: boolean) {\n    if (visible === undefined) {\n      this.navbarVisible = !this.navbarVisible\n    } else {\n      this.navbarVisible = visible\n    }\n  }\n}","import {\n  observable\n} from 'mobx'\n\nexport interface IAppStore {\n  version: string\n}\n\nexport class AppStore implements IAppStore {\n  readonly version: string = '0.0.0'\n  \n  @observable versionName: string = 'November Rain'\n}","import {\n  observable,\n  action\n} from 'mobx'\nimport MarkdownIt from 'markdown-it'\nimport hljs from 'highlight.js'\n\nexport interface IPostStore {\n  posts: IPost[]\n  fetching: boolean\n}\n\nexport interface IPost {\n  title: string\n  summary: string\n  createDate: number\n  updateDate: number\n  content: string\n  author: string\n}\n\nexport class PostStore implements IPostStore {\n  md: MarkdownIt = new MarkdownIt({\n    highlight: (str, lang) => {\n      console.log(lang, hljs.getLanguage(lang))\n      if (lang && hljs.getLanguage(lang)) {\n        try {\n          return `<pre class=\"hljs\"><code>${hljs.highlight(lang, str, true).value}</code></pre>`\n        } catch (E) {\n          console.error(E)\n        }\n      }\n\n      return ''\n    }\n  })\n\n  @observable posts: IPost[] = []\n  @observable fetching = false\n\n  @action\n  async fetchPosts() {\n\n    if (this.posts.length) {\n      return\n    }\n\n    this.fetching = true\n    \n    const res = await fetch('https://service-rzwlbsaq-1253264948.gz.apigw.tencentcs.com/release/posts')\n    const { data }: IReponse<any[]> = await res.json() as any\n    \n    this.posts = data.map(item => {\n      const attrs = item.attributes\n      const body = item.body\n\n      return {\n        title: attrs.title,\n        summary: attrs.description,\n        createDate: new Date().getTime(),\n        updateDate: new Date().getTime(),\n        author: 'Samuel',\n        content: this.resolveMarkdownSource(body)\n      }\n    })\n    \n    this.fetching = false\n  }\n\n  private resolveMarkdownSource(source: string) {\n    return this.md.render(source)\n  }\n}","import React from 'react'\nimport { AppStore } from './app'\nimport { ThemeStore } from './theme'\nimport { PostStore } from './post'\n\nexport const appStore = new AppStore()\nexport const themeStore = new ThemeStore()\nexport const postStore = new PostStore()\n\nexport const appState = {\n  appStore,\n  themeStore,\n  postStore\n}\n\nexport const storesContext = React.createContext({\n  app: appStore,\n  theme: themeStore,\n  post: postStore\n})\n\nexport function useStores() {\n  return React.useContext(storesContext)\n}","import styled from 'styled-components'\nimport theme from 'styled-theming'\nimport { LayoutModes } from '@/models/theme'\n\nconst flexDirection = theme('mode', {\n  [LayoutModes.House]: 'row',\n  [LayoutModes.Recipe]: 'column'\n})\n\nexport const NavbarList = styled.ul`\n  float: right;\n  display: flex;\n  flex-direction: ${flexDirection};\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  padding-right: 140px;\n`","import React from 'react'\nimport styled from 'styled-components'\nimport theme from 'styled-theming'\nimport { LayoutModes } from '@/models/theme'\n\ninterface INavbarListItemRootProps {\n  active: boolean | undefined,\n  onClick: React.EventHandler<any>\n}\n\nconst padding = theme('mode', {\n  [LayoutModes.House]: '0 20px',\n  [LayoutModes.Recipe]: '20px 0'\n})\n\nexport const NavbarListItemRoot = styled.li`\n  display: flex;\n  align-items: center;\n  color: ${(props: INavbarListItemRootProps) => props.active ? '#fff' : '#999'};\n  font-family: Merriweather;\n  font-size: 24px;\n  font-weight: bold;\n  padding: ${padding};\n  cursor: pointer;\n  transform-origin: center;\n  transition: all 300ms;\n\n  span {\n    position: relative;\n    display: inline-block;\n    border-bottom: 2px solid #fff;\n    border-width: 0;\n  }\n\n  &:hover {\n    transform: scale(1.1, 1.1);\n    \n    span::after {\n      content: '';\n      position: absolute;\n      left: 0;\n      bottom: -2px;\n      display: block;\n      height: 2px;\n      width: 100%;\n      background-color: #fff;\n      transform-origin: center;\n      animation: spread 300ms;\n    }\n  }\n\n  @keyframes spread {\n    from {\n      transform: scale(0, 1);\n    }\n\n    to {\n      transform: scale(1, 1);\n    }\n  }\n`\n\nexport interface INavbarListItemProps extends INavbarListItemRootProps {\n  children: string\n}\n\nexport function NavbarListItem({ children, active, onClick }: INavbarListItemProps) {\n  return (\n    <NavbarListItemRoot active={active} onClick={onClick}>\n      <span>{ children }</span>\n    </NavbarListItemRoot>\n  )\n}","import React from 'react'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport { routes } from '@/routes'\nimport {\n  NavbarList,\n  NavbarListItem\n} from './_components'\n\nexport default NavbarListContainer\n\nfunction NavbarListContainer() {\n  const location = useLocation()\n  const history = useHistory()\n\n  function handleNavbarListItemClick(path: string) {\n    history.push(path)\n  }\n\n  return (\n    <NavbarList>\n      {routes.map(item => (\n        <NavbarListItem\n          key={item.name}\n          active={location.pathname === item.link}\n          onClick={() => handleNavbarListItemClick(item.link)}\n        >\n          { item.meta.label }\n        </NavbarListItem>\n      ))}\n    </NavbarList>\n  )\n}","import { css } from 'styled-components'\nimport ImageBackground from '../assets/images/background.jpg'\n\nexport const BlurRoot = css`\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    filter: blur(20px);\n    z-index: -1;\n    margin: -10px;\n    background: url(${ImageBackground}) 0 / cover fixed;\n  }\n`","import React from 'react'\nimport styled from 'styled-components'\nimport theme from 'styled-theming'\nimport IconClose from '@/assets/icons/close.svg'\nimport NavbarList from '@/containers/NavbarList'\nimport { LayoutModes } from '@/models/theme'\nimport { BlurRoot } from '@/components/BlurRoot'\n\nconst height = theme('mode', {\n  [LayoutModes.House]: '100px',\n  [LayoutModes.Recipe]: '100%'\n})\nconst width = theme('mode', {\n  [LayoutModes.House]: '100%',\n  [LayoutModes.Recipe]: '400px'\n})\n\ninterface IWrapperProps {\n  collapsed?: boolean\n}\nconst Wrapper = styled.div`\n  position: relative;\n  height: ${height};\n  width: ${(props: IWrapperProps) => props.collapsed ? 0 : width};\n  background-color: rgba(0,0,0,.2);\n  transition: all 300ms;\n\n  ${BlurRoot}\n`\n\nconst switcherDisplay = theme('mode', {\n  [LayoutModes.House]: 'none',\n  [LayoutModes.Recipe]: 'block'\n})\n\nconst Swithcer = styled.img.attrs({\n  src: IconClose\n})`\n  display: ${switcherDisplay};\n  position: absolute;\n  top: 0;\n  right: 0;\n  height: 30px;\n  width: 30px;\n  padding: 15px;\n  color: #fff;\n  opacity: 0;\n  cursor: pointer;\n  transition: all 300ms;\n  transform: rotate(45deg);\n\n  &:hover {\n    opacity: .6;\n    transform: rotate(0);\n  }\n`\n\nexport default Navbar\n\nexport interface INavbar {\n  collapsed: boolean\n  mode: LayoutModes,\n  onClose: React.EventHandler<any>\n}\n\nfunction Navbar({\n  collapsed,\n  mode,\n  onClose\n}: INavbar) {\n\n  return (\n    <Wrapper collapsed={collapsed}>\n      {mode === LayoutModes.Recipe && (<Swithcer onClick={onClose} />)}\n\n      <NavbarList />\n    </Wrapper>\n  )\n}","import theme from 'styled-theming'\nimport { LayoutModes } from '@/models/theme'\n\nexport const height = theme('mode', {\n  [LayoutModes.House]: 'calc(100% - 100px)',\n  [LayoutModes.Recipe]: '100%'\n})\n\nexport const width = theme('mode', {\n  [LayoutModes.House]: '100%',\n  [LayoutModes.Recipe]: 'calc(100% - 400px)'\n})\n\nexport const flexGrow = theme('mode', {\n  [LayoutModes.House]: '0',\n  [LayoutModes.Recipe]: '1'\n})","import React from 'react'\nimport styled from 'styled-components'\nimport IconArrowRight from '@/assets/icons/arrow-right.svg'\nimport * as ContentTheme from './themes/Content'\n\nexport const ContentRoot = styled.div`\n  position: relative;\n  flex-grow: ${ContentTheme.flexGrow};\n  height: ${ContentTheme.height};\n  width: ${ContentTheme.width};\n`\n\nexport const CallNavOutArrow = styled.img.attrs({\n  src: IconArrowRight\n})`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 10;\n  height: 40px;\n  width: 40px;\n  padding: 15px;\n  opacity: 0;\n  cursor: pointer;\n\n  &:hover {\n    opacity: .6;\n    animation: showup 500ms;\n  }\n\n  @keyframes showup {\n    from {\n      transform: translate(-15px);\n      opacity: 0;\n    }\n\n    to {\n      transform: translate(0);\n      opacity: .6;\n    }\n  }\n`\n\nexport default Content\n\ninterface IContent {\n  children: React.ReactNode,\n  callNavOutVisible: boolean,\n  onCallNavOut: React.EventHandler<any>\n}\n\nfunction Content({\n  children,\n  callNavOutVisible,\n  onCallNavOut\n} : IContent) {\n\n  return (\n    <ContentRoot>\n      {callNavOutVisible && (<CallNavOutArrow onClick={onCallNavOut} />)}\n      { children }\n    </ContentRoot>\n  )\n}","import theme from 'styled-theming'\nimport { LayoutModes } from '@/models/theme'\n\nexport const display = theme('mode', {\n  [LayoutModes.House]: 'block',\n  [LayoutModes.Recipe]: 'flex'\n})","import React from 'react'\nimport { observer } from 'mobx-react'\nimport styled, { ThemeProvider } from 'styled-components'\nimport { useStores } from '@/models'\nimport Navbar from './Navbar'\nimport Content from './Content'\nimport * as MainTheme from './themes/Main'\n\nconst Main = styled.main`\n  position: relative;\n  display: ${MainTheme.display};\n  height: 100%;\n  width: 100%;\n`\n\nexport default observer(Layout)\n\nexport interface ILayout {\n  children: React.ReactElement\n}\n\nfunction Layout({ children }: ILayout) {\n  const { theme } = useStores()\n\n  function handleCloseNavbar() {\n    theme.toggleNavbar(false)\n  }\n\n  function handleOpenNavbar() {\n    theme.toggleNavbar(true)\n  }\n\n  return (\n    <ThemeProvider theme={{\n      mode: theme.layout\n    }}>\n      <Main>\n        <Navbar\n          mode={theme.layout}\n          collapsed={!theme.navbarVisible}\n          onClose={handleCloseNavbar}\n        />\n        <Content\n          callNavOutVisible={!theme.navbarVisible}\n          onCallNavOut={handleOpenNavbar}\n        >\n          { children }\n        </Content>\n      </Main>\n    </ThemeProvider>\n  )\n}","import { css } from 'styled-components'\n\nexport interface IAnimationFadeIn {\n  duration: number\n}\nexport function fadeIn(config: IAnimationFadeIn = {\n  duration: 300\n}) {\n  return css`\n    animation: fadeIn ${config.duration}ms;\n\n    @keyframes fadeIn {\n      from {\n        transform: translate(0, -15px);\n        opacity: 0;\n      }\n\n      to {\n        transform: translate(0, 0);\n        opacity: 1;\n      }\n    }\n  `\n}\n","import styled from 'styled-components'\nimport { fadeIn } from '../../../components/animations'\n\nexport const Wrapper = styled.div`\n  position: relative;\n  height: 100%;\n  width: 100%;\n`\n\nexport const Hint = styled.div`\n  position: absolute;\n  right: 50px;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n  width: 269px;\n  height: 300px;\n`\n\nexport const Title = styled.h1`\n  color: #fff;\n  font-size: 60px;\n  font-weight: bold;\n  font-family: \"Brig\";\n  text-align: right;\n\n  ${fadeIn({ duration: 2000 })}\n`\n\nexport const Message = styled.p`\n  color: #fff;\n  font-size: 36px;\n  font-weight: bold;\n  font-family: \"Baskerville\";\n`","import React, { useLayoutEffect } from 'react';\nimport {\n  observer\n} from 'mobx-react';\nimport Typed from 'typed.js'\nimport {\n  Wrapper,\n  Hint,\n  Title,\n  Message\n} from './_components';\n\nexport default observer(HomePage)\n\nfunction HomePage() {\n\n  useLayoutEffect(() => {\n    new Typed('#message', {\n      strings: [`It's Hard to Hold A Candle, in The Cold November Rain`],\n      typeSpeed: 100,\n      fadeOut: true\n    })\n  }, [])\n\n  return (\n    <Wrapper>\n      <Hint>\n        <Title>Use Yourself</Title>\n        <Message id=\"message\" />\n      </Hint>\n    </Wrapper>\n  )\n}","import React from 'react'\n\nexport default AboutPage\n\nfunction AboutPage() {\n  return (\n    <h1>About</h1>\n  )\n}","import styled from 'styled-components'\n\nexport const PostList = styled.ul`\n  height: 95%;\n  overflow: auto;\n  \n  &::-webkit-scrollbar {\n    visibility: hidden;\n  }\n`","import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { lineClamp } from '@/components/LineClamp'\nimport { fadeIn } from '@/components/animations'\n\ninterface IPostListItemWrapperProps {\n  contentMode: boolean\n}\nexport const Wrapper = styled.li`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  padding: 16px;\n  margin: 12px auto;\n  cursor: pointer;\n  background-color: rgba(255,255,255,.2);\n  transition: all 300ms;\n  transform-origin: center;\n\n  ${(props: IPostListItemWrapperProps) => props.contentMode ? css`\n    position: absolute;\n    top: 15px;\n    left: 0;\n    right: 0;\n    z-index: 10;\n    margin: auto;\n    height: 95%;\n    width: 95%;\n    overflow: auto;\n    background-color: rgba(35, 36, 32, .6);\n\n    &::-webkit-scrollbar {\n      visibility: hidden;\n    }\n\n    ${fadeIn()}\n  ` : css`\n    &:hover {\n      box-shadow: 0 0 20px 1px rgba(255,255,255,.1);\n      transform: scale(1.02, 1.02);\n    }\n  `}\n  \n`\n\nexport const PostTitle = styled.h1`\n  color: #b95951;\n  font-size: 30px;\n  font-weight: bolder;\n  font-family: \"Fangzheng NShuSong\";\n  line-height: 30px;\n  text-align: center;\n\n  ${lineClamp(2)}\n`\n\nexport const PostMeta = styled.h2`\n  color: rgba(185,89,81,.8);\n  font-size: 14px;\n  font-style: italic;\n  font-family: Lora;\n  line-height: 20px;\n  text-align: center;\n  margin: 10px 0;\n`\n\nexport const PostMetaItem = styled.span`\n  margin-right: 20px;\n`\n\nexport const PostSummary = styled.p`\n  color: #555;\n  font-weight: bold;\n  font-family: \"Fangzheng NShuSong\";\n  line-height: 30px;\n`\n\ninterface IPostListItemProps {\n  children: React.ReactNode,\n  contentMode: boolean,\n  onClick: React.EventHandler<any>\n}\n\nexport function PostListItem({\n  children,\n  contentMode,\n  onClick\n}: IPostListItemProps) {\n  return (\n    <Wrapper onClick={onClick} contentMode={contentMode}>\n      { children }\n    </Wrapper>\n  )\n}","import { css } from 'styled-components'\n\nexport function lineClamp(lines: number) {\n  return css`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: ${lines};\n    -webkit-box-orient: vertical;\n  `\n}","import React, { useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport IconFullscreen from '@/assets/icons/fullscreen.svg'\n\nconst Wrapper = styled.div`\n  position: relative;\n`\n\nconst MarkdownViewer = styled.div.attrs({\n  className: 'markdown-viewer'\n})`\n  padding-top: 40px;\n`\n\nconst FullscreenTrigger = styled.img.attrs({\n  src: IconFullscreen\n})`\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  height: 30px;\n  width: 30px;\n  opacity: .8;\n`\n\ninterface IPostContent {\n  children: string\n}\nexport function PostContent({\n  children\n}: IPostContent) {\n  const [isFullscreen, setFullscreenStatus] = useState(false)\n  const el = useRef<HTMLDivElement>(null)\n\n  function handleFullscreen() {\n    if (el.current) {\n      el.current.requestFullscreen()\n    }\n  }\n\n  return (\n    <Wrapper ref={el}>\n      <FullscreenTrigger onClick={handleFullscreen} />\n\n      <MarkdownViewer dangerouslySetInnerHTML={{__html: children}} />\n    </Wrapper>\n  )\n}","import React from 'react'\nimport styled from 'styled-components'\nimport ReactLoading from 'react-loading'\nimport { BlurRoot } from '../../../components/BlurRoot'\nimport { fadeIn } from '../../../components/animations'\n\nexport * from './PostList'\nexport * from './PostListItem'\nexport * from './PostContent'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n`\n\nexport const PostPortal = styled.div`\n  position: relative;\n  height: 95%;\n  width: 95%;\n  overflow: hidden;\n\n  ${BlurRoot}\n\n  ${fadeIn()}\n`\n\nexport const Loading = styled(ReactLoading)`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  opacity: .4;\n`\n\ninterface IPostPageRootProps {\n  children: React.ReactNode\n}\n\nexport function PostPageRoot({ children }: IPostPageRootProps) {\n  return (\n    <Wrapper>\n      <PostPortal>\n        { children }\n      </PostPortal>\n    </Wrapper>\n  )\n}","import React, {\n  useEffect,\n  useCallback,\n  useMemo\n} from 'react'\nimport {\n  useHistory,\n  useRouteMatch\n} from 'react-router-dom'\nimport {\n  observer\n} from 'mobx-react'\nimport dayjs from 'dayjs'\nimport {\n  useStores\n} from '../../models'\nimport {\n  PostPageRoot,\n  Loading,\n  PostList,\n  PostListItem,\n  PostTitle,\n  PostMeta,\n  PostMetaItem,\n  PostSummary,\n  PostContent\n} from './_components'\n\nexport default observer(PostsPage)\n\ntype TPostPageParams = undefined | {\n  id?: string | undefined\n}\n\nfunction PostsPage() {\n  const { post } = useStores()\n  const history = useHistory()\n  const match = useRouteMatch('/posts/:id')\n  const params: TPostPageParams = match?.params || {}\n\n  const fmtDate = useCallback((date: number) => dayjs(date).format('MM/DD/YYYY'), [])\n  const list = useMemo(() => {\n    if (params.id) {\n      return post.posts.filter((_, index) => index === Number(params.id))\n    } else {\n      return post.posts\n    }\n  }, [params, post])\n\n  useEffect(() => {\n    post.fetchPosts()\n  }, [post])\n\n  function handlePostClick(index: number) {\n    (index !== Number(params?.id) && history.push(`/posts/${index}`))\n  }\n\n  console.log(params)\n  return (\n    <PostPageRoot>\n      {post.fetching ? (\n        <Loading type=\"spin\" />\n      ) : (\n        <PostList>\n          {list.map((item, index) => {\n            const isContentMode = index === Number(params.id)\n            return (\n              <PostListItem\n                key={item.title}\n                onClick={() => handlePostClick(index)}\n                contentMode={isContentMode}\n              >\n                <PostTitle>{ item.title }</PostTitle>\n                \n                {isContentMode ? (\n                  <PostContent>\n                    { item.content }\n                  </PostContent>\n                ): (\n                  <>\n                    <PostMeta>\n                      <PostMetaItem>author: { item.author }</PostMetaItem>\n                      <PostMetaItem>last updated: { fmtDate(item.updateDate) }</PostMetaItem>\n                      <PostMetaItem>created at: { fmtDate(item.createDate) }</PostMetaItem>\n                    </PostMeta>\n                    <PostSummary>{ item.summary }</PostSummary>\n                  </>\n                )}\n              </PostListItem>\n            )\n          })}\n        </PostList>\n      )}\n    </PostPageRoot>\n  )\n}","import React from 'react'\nimport {\n  Router,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\n\nimport Layout from '../layouts'\n\nimport HomePage from '../pages/home'\nimport AboutPage from '../pages/about'\nimport PostsPage from '../pages/posts'\n\nconst history = createBrowserHistory()\n\nexport interface IRoute {\n  name: string\n  path: string | string[]\n  link: string\n  exact?: boolean\n  render(): React.ReactElement\n  meta: {\n    title: string\n    label: string\n  }\n}\n\nexport const routes: IRoute[] = [\n  {\n    name: 'home',\n    path: '/',\n    link: '/',\n    exact: true,\n    render() {\n      return (<HomePage />)\n    },\n    meta: {\n      title: 'Home',\n      label: 'Home'\n    }\n  },\n  {\n    name: 'posts',\n    path: ['/posts', '/posts/:id'],\n    link: '/posts',\n    render() {\n      return (<PostsPage />)\n    },\n    meta: {\n      title: 'Posts',\n      label: 'Posts'\n    }\n  },\n  {\n    name: 'about',\n    path: '/about',\n    link: '/about',\n    render() {\n      return (<AboutPage />)\n    },\n    meta: {\n      title: 'About',\n      label: 'About'\n    }\n  },\n]\n\nexport function AppRoutes() {\n  return (\n    <Router history={history}>\n      <Layout>\n        <Switch>\n          {routes.map(item => (\n            <Route key={item.name} exact={item.exact} path={item.path}>\n              { item.render() }\n            </Route>\n          ))}\n        </Switch>\n      </Layout>\n    </Router>\n  )\n}\n","import React from 'react'\nimport { Provider } from 'mobx-react'\nimport { AppRoutes } from './routes'\nimport { appState } from './models'\n\nfunction App() {\n  return (\n    <Provider { ...appState }>\n      <AppRoutes />\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'normalize.css'\nimport '@/libs/markdown.scss'\nimport 'highlight.js/styles/monokai.css'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/close.1119159d.svg\";","module.exports = __webpack_public_path__ + \"static/media/background.59f72571.jpg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-right.c3180dec.svg\";","module.exports = __webpack_public_path__ + \"static/media/fullscreen.7b4374fd.svg\";"],"sourceRoot":""}